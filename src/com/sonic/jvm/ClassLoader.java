package com.sonic.jvm;

/**
 * 虚拟机自带的加载器：
 *   1、启动类加载器（Bootstrap） C++
 *   2、扩展类加载器（Extension） Java
 *   3、应用程序类加载器（AppClassLoader）
 *   	Java也叫系统类加载器，加载当前应用的 classpath的所有类
 *
 * 用户自定义加载器：
 *   Java.lang.ClassLoader的子类，用户可以定制类的加载方式
 *
 *
 * 双亲委派机制
 *
 * 先从启动类加载器中找，找得到则直接用，找不到则到扩展类加载器中找，
 * 找得到则直接用，找不到则到应用程序类加载器中找。
 *
 * 当一个类收到了类加载器请求，它首先不会尝试自己去加载这个类，
 * 而是把这个请求委派给父类去完成，每一个层次类加载器都是如此，
 * 因此所有的加载请求都应该传送到启动类加载器中（Bootstrap），
 * 只有当父类加载器反馈自己无法完成这个请求的时候（在它的加载路径下
 * 没有找到所需加载的Class），子类加载器才会尝试自己去加载。
 *
 * 采用双亲委派的一个好处（沙箱安全机制）是，比如加载位于 rt.jar包中的类 java.lang.Object,
 * 不管是哪个加载器加载这个类，最终都是委托给顶层的启动类加载器进行加载，
 * 这样就保证了使用不同的类加载器最终得到的都是同一个 Object对象。
 *
 * @author Sonic
 */
public class ClassLoader {
}
